/* Xbonacci
Fibonacci series is generated using a simple rule:
This states that the next element is generated by summing the last two elements.
Fibonacci series is generated by using the first two elements as [1, 1] - this is
known as the signature of the series - and using above rule.
Then, the generated series will be : 1, 1, 2, 3, 5, 8, 13, 21
We can generalize this to generate a series from a signature of length N
and a rule that generate the next element by summing previous N
elements. So if given signature [1,1,1] we generate [1, 1, 1, 3, 5, 9, 17, 31,.....]
Implement a function Xbonacci(sig, n) that will take a signature array and the
length of the series to be generated. It will return a new array of length n
containing the generated series.

Xbonacci([1,1], 10) ===> [1,1,2,3,5,8,13,21,34,55]
Xbonacci([1,1,1], 8) ===> [1,1,1,3,5,9,17,31]
Xbonacci([1,1,1,1], 10) ===> [1,1,1,1,4,7,13,25,49,94]
Xbonacci([0,0,0,0,1], 10) ===> [0,0,0,0,1,1,2,4,8,16] */

function Xbonacci(sigArr, n) {
  //   let sigNoZeros = sigArr.slice(0).length;
  let newArr = [];
  let sumArr = 0;

  for (let i = 0; i < sigArr.length; i++) {
    sumArr += sigArr[i];
  }

  newArr = newArr.concat(sigArr);
  newArr = newArr.concat(sumArr);

  for (i = newArr.length; i < n; i++) {
    sumArr -= newArr[newArr.length - sigArr.length - 1];
    sumArr += newArr[newArr.length - 1];

    newArr.push(sumArr);
  }

  //   for (let i = 0; i < n - sigArr.length; i++) {
  //     i = newArr.length - sigArr.length;
  //     sum = 0;
  //     for (let j = 0; j < sigArr.length; j++) {
  //       sum += sigArr[i];
  //     }
  //     newArr.push(sum);
  //   }

  return newArr;
}

console.log(Xbonacci([1, 1, 1], 8)); // [1,1,1,3,5,9,17,31]
console.log(Xbonacci([1, 1, 1, 1], 10)); // [1,1,1,1,4,7,13,25,49,94]
console.log(Xbonacci([0, 0, 0, 0, 1], 10)); // [0,0,0,0,1,1,2,4,8,16]
